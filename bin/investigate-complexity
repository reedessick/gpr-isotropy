#!/usr/bin/python

__usage__ = "investigate-complexity [--options]"
__doc__ = """\
a simple script that investigates the complexity (and the scaling thereof) of different models.
We place particular emphasis on how many events we need to meaningfully constrain different models."""
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
from optparse import OptionParser

import numpy as np
import healpy as hp

from scipy.stats import beta, vonmises

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

#-------------------------------------------------

DEFAULT_SIZE = 50
DEFAULT_NEVENT_RANGE = (1, 1000, 10)
DEFAULT_NTRIALS = 100

DEFAULT_STD = 1e-1
DEFAULT_VAR = DEFAULT_STD**2

#-------------------------------------------------

def draw_random(size):
    x = np.linspace(0, 1, size+1)
    p = np.random.rand(size) # enforce periodic boundary conditions this way (x=0 <--> x=1)
    return x[:-1], p*(x[1]-x[0])

def draw_gauss(size, var=DEFAULT_VAR):
    x = np.linspace(0, 1, size)
    p = np.exp(-0.5*(x-np.random.rand())**2/var)/(2*np.pi*var)**0.5
    return x, p*(x[1]-x[0])

def draw_vonmises(size, var=DEFAULT_VAR):
    x = np.linspace(-np.pi, np.pi, size+1)

    p = vonmises.pdf(x, kappa=1./var, loc=(np.random.rand()-0.5)*2*np.pi)
    return x[:-1], p[:-1]*(x[1]-x[0])

def draw_beta(size, var=DEFAULT_VAR):
    x = np.linspace(0, 1, size+2)[1:-1] ### we skip the boundaries because of the beta distribution's domain

    m = np.random.rand() ### get the mean
    max_var = m*(1-m)

    a = m*(max_var - var)/var if var < max_var else 1e-6 ### something really tiny, approximate the limit alpha -> 0
    b = (1-m)/m * a

    p = beta.pdf(x, a, b)
    return x, p*(x[1]-x[0])

def draw_skymap(size, **kwargs):
    raise NotImplementedError

MODES = {
    'random':draw_random,
    'gaussian':draw_gauss,
    'vonmises':draw_vonmises,
    'beta':draw_beta,
#    'skymap':draw_skymap,
}
KNOWN_MODES = MODES.keys()
DEFAULT_MODE = KNOWN_MODES[0]

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('-n', '--size', default=DEFAULT_SIZE, type='int',
    help='DEFAULT=%d'%DEFAULT_SIZE)

parser.add_option('-N', '--Nevent-range', default=DEFAULT_NEVENT_RANGE, nargs=3, type='int',
    help='We investigate the behavior of the eigenvalues within this range of Nevent. \
To investigate every 3rd integer between 1 and 200, one should specify `--Nevent-range 1 200 3`. \
DEFAULT=%d %d %d'%DEFAULT_NEVENT_RANGE)
parser.add_option('-m', '--Ntrials', default=DEFAULT_NTRIALS, type='int',
    help='The number of trials performed for each Nevent. \
DEFAULT=%d'%DEFAULT_NTRIALS)

parser.add_option('--mode', default=DEFAULT_MODE, type='string', 
    help='must be one of %s. \
DEFAULT=%s'%(', '.join(KNOWN_MODES), DEFAULT_MODE))
parser.add_option('--std', default=DEFAULT_STD, type='float',
    help='standard deviation of the single-event distributions. \
DEFAULT=%.3f'%DEFAULT_STD)

parser.add_option('-p', '--plot-single-events', dest='plot', default=False, action='store_true',
    help='plot the single event "posteriors" for each trial')
parser.add_option('-e', '--eigvals', default=False, action='store_true',
    help='plot the distribution of eigenvalues for each trial')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args) == 0, 'please supply exactly 0 input argument\n%s'%__usage__
assert opts.mode in KNOWN_MODES, '--mode=%s not understood. Must be one of %s'%(opts.mode, ', '.join(KNOWN_MODES))

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

opts.verbose |= opts.Verbose

#-------------------------------------------------

### set up arguments for simulation functions
draw = MODES[opts.mode]
if opts.mode=='random':
    args = (opts.size,)

elif opts.mode=='gaussian':
    args = (opts.size, opts.std**2)

elif opts.mode=='vonmises':
    args = (opts.size, (2*np.pi*opts.std)**2) ### scale this so it is a fraction of the functions domain like what happens for everything else

elif opts.mode=='beta':
    args = (opts.size, opts.std**2)

else:
    raise ValueError('--mode=%s not understood'%opts.mode)

#-------------------------------------------------

### stack simulations and compute ranks
fish = np.zeros((opts.size, opts.size), dtype=float) ### allocate memory for the big array

summary = []
maxeigs = []
for nevent in xrange(*opts.Nevent_range):
    if opts.verbose:
        print('simulating %d events'%nevent)

    if opts.eigvals:
        e_fig = plt.figure()
        e_ax = e_fig.gca()

    ranks = []
    abseigs = []
    for trial in xrange(opts.Ntrials):
        if opts.Verbose:
            print('    trial %d / %d'%(trial, opts.Ntrials))

        if opts.plot:
            p_fig = plt.figure()
            p_ax = p_fig.gca()

        fish[...] = 0.
        for event in xrange(nevent):
            x, p = draw(*args)
            fish += np.outer(p, p)

            if opts.plot:
                p_ax.plot(x, p, alpha=0.5)
                p_ax.set_xlim(min(x), max(x))

        eigs = np.abs(np.linalg.eigvals(fish))
        abseigs.append(np.max(eigs))
        if opts.eigvals:
            eigs = eigs[eigs>0] ### keep only those that won't break my log10...
            ###        divide out expected scaling with the number of events
            e_ax.hist(np.log10(eigs) - np.log10(nevent), bins=1001, histtype='step', cumulative=-1, label='trial %d'%trial)

        ranks.append(np.linalg.matrix_rank(fish))

        if opts.plot:
            p_ax.set_xlabel('x')
            p_ax.set_ylabel('p(x)')
            p_ax.grid(True, which='both')
            figname = '%s/investigate-complexity%s-distribs-size%d-nevent%d-trial%d.png'%(opts.output_dir, opts.tag, opts.size, nevent, trial)
            if opts.Verbose:
                print('    saving: '+figname)
            p_fig.savefig(figname)
            plt.close(p_fig)

    summary.append(ranks)
    maxeigs.append(abseigs)

    if opts.eigvals:
        e_ax.set_xlabel('log10(|eigval|/Nevent)')
        e_ax.set_ylabel('cumulative count')
        e_ax.grid(True, which='both')
        figname = '%s/investigate-complexity%s-eigvals-size%d-nevent%d.png'%(opts.output_dir, opts.tag, opts.size, nevent)
        if opts.Verbose:
            print('saving: '+figname)
        e_fig.savefig(figname)
        plt.close(e_fig)

### print summary information about ranks and plot a figure
if opts.verbose:
    print('plotting')

#------------------------

#--- scaling of "rank"
fig = plt.figure()
ax = fig.gca()

ax.boxplot(summary, positions=range(*opts.Nevent_range))
for ranks, x in zip(summary, range(*opts.Nevent_range)):
    ax.plot([x]*len(ranks), ranks, marker='o', markersize=4, markeredgecolor='k', markerfacecolor='none', alpha=0.25, linestyle='none')

# decorate
ax.set_xlabel('number of events')
ax.set_ylabel('rank')

# add expected assymptotes...
if opts.mode=='random':
    ax.plot(ax.get_xlim(), [opts.size]*2, 'k--') ### add line for the size of the array

elif opts.mode=='gaussian':
#    ax.plot(ax.get_xlim(), [opts.size*opts.gaussian_std]*2, 'k--')
    pass ### I don't understand the scaling here, so it's not clear how to predict it...

elif opts.mode=='vonmises':
    ax.plot(ax.get_xlim(), [opts.size]*2, 'k--') ### add line for the size of the array

elif opts.mode=='beta':
    ax.plot(ax.get_xlim(), [opts.size]*2, 'k--') ### add line for the size of the array

else:
    pass ### just skip it...

ymin, ymax = ax.get_ylim()
ax.set_ylim(ymin=ymin/1.1, ymax=ymax*1.1)

# save
figname = '%s/investigate-complexity-rank%s.png'%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)


#------------------------

#--- scaling of maximum eigenvalues
fig = plt.figure()
ax = fig.gca()

ax.boxplot(maxeigs, positions=range(*opts.Nevent_range))
for eigs, x in zip(maxeigs, range(*opts.Nevent_range)):
    ax.plot([x]*len(eigs), eigs, marker='o', markersize=4, markeredgecolor='k', markerfacecolor='none', alpha=0.25, linestyle='none')

# decorate
ax.set_xlabel('number of events')
ax.set_ylabel('max{|eigval|}')

# save
figname = '%s/investigate-complexity-maxeig%s.png'%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
