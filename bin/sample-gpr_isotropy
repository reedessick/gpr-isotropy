#!/usr/bin/env python

__usage__ = "sample-gps_isotropy [--options] config.ini exposure.fits.gz skymap.fits.gz [skymap.fits.gz skymap.fits.gz ...]"
__doc__ = """\
a simple script that samples from the posterior given some priors.
This is represented by an a posteriori condidtioned Gaussian Process for eps for many stochastic samples drawn from the marginal posterior for Ro.
Output data is formatted in hdf5, with a separate dataset for each Ro sample.

Explicitly checks for coordinate systems in FITS files. If they are not declared, assumes COORD=C. If they are declared, requires COORD=C"""
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np
import healpy as hp

from optparse import OptionParser

### non-standard libraries
from gpr_isotropy import utils
from gpr_isotropy import configparser

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('-N', '--num-samples', default=utils.DEFAULT_NUM_SAMPLES, type='int',
    help='DEFAULT=%d'%utils.DEFAULT_NUM_SAMPLES)
parser.add_option('-n', '--nside', default=utils.DEFAULT_NSIDE, type='int',
    help='DEFAULT=%d'%utils.DEFAULT_NSIDE)

parser.add_option('-i', '--input-path', default=None, type='string',
    help='the path to a previous --output-path that will be used to instantiate the sampler\'s position')
parser.add_option('-o', '--output-path', default=utils.DEFAULT_OUTPUT_PATH, type='string',
    help='DEFAULT='+utils.DEFAULT_OUTPUT_PATH)

opts, args = parser.parse_args()
assert len(args) >= 3, 'please supply at least 3 input arguments\n%s'%__usage__
config = args[0]
exposure = args[1]
maps = args[2:]

dirname = os.path.dirname(opts.output_path)
if not os.path.exists(dirname):
    os.path.makedirs(dirname)

opts.verbose |= opts.Verbose

#-------------------------------------------------

### load things

e = utils.read(exposure, nside=opts.nside, coord='C', verbose=opts.Verbose) ### load in exposure
m = [utils.read(path, nside=opts.nside, coord='C', verbose=opts.Verbose) for path in maps] ### load in maps for each event

c = configparser.read(config, nside=opts.nside, verbose=opts.Verbose) ### parse the config file

#------------------------

### set up objects
if opts.verbose:
    print('instantiating sampler')
sampler = configparser.config2sampler(c, opts.nside, e, m, verbose=opts.Verbose)
sampler.initialize(path=opts.input_path, verbose=opts.Verbose)

#------------------------

if opts.verbose:
    print('sampling for %d iterations'%opts.num_samples)
sampler.sample(opts.num_samples, path=opts.output_path, verbose=opts.verbose)
